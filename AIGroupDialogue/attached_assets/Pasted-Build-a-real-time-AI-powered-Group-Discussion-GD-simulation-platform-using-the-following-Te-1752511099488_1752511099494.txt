Build a real-time AI-powered Group Discussion (GD) simulation platform using the following:

ðŸ”§ Tech Stack:
- Frontend: React.js with Tailwind CSS
- Backend: Firebase Cloud Functions
- Database: Firebase Firestore
- AI: Gemini Pro 1.5 API (use my API key securely via Firebase config)
- Hosting: Firebase Hosting

ðŸŽ¯ App Title:
"AI Group Discussion Practice Platform"

ðŸŽ¯ Objective:
Users should be able to schedule GD or interview sessions by selecting a topic, date, time, and number of participants (real + AI). Real users can join using a sharable link. AI bots should speak like humans on the given topic. After the session, an AI-generated feedback report is created.

---

âœ… Pages to Include:

1. **/schedule**
   - Form to enter: Name, GD Topic, Date, Time, # of AI participants, # of Real users
   - Save this to Firestore collection `sessions`
   - After submission, generate and show a unique join link (e.g., `/join/abc123`)

2. **/join/:sessionId**
   - Display the topic and all participants
   - Real users can send messages or audio
   - AI participants should automatically generate natural conversation using Gemini
   - Use socket.io or Firestore listeners for real-time updates

3. **/summary/:sessionId**
   - After GD ends, call Gemini API to generate a feedback report
   - Include: each participant's activity, content quality, clarity, and improvement suggestions
   - Save the report to Firestore under `feedback` field of the session

---

ðŸ§  Gemini AI Bot Setup:
- Use Gemini Pro 1.5 API to simulate 2â€“3 AI participants
- Each bot should have a unique style (e.g., confident, emotional, data-driven)
- Example prompt for bots:
  > "You're in a GD. Topic: 'Impact of AI on Jobs'. Respond like a confident leader. Give your opinion in 3 short points."

---

ðŸ”’ Use my Gemini API Key securely:
- Store the API key using Firebase Functions config:
  `firebase functions:config:set gemini.key="AIzaSyDgNqeGXQKMd_HR5zslacRbgo0QJ9NbIrY"`
- Access it in Cloud Functions using:
  `functions.config().gemini.key`

---

ðŸ§ª Firestore Schema:
Collection: `sessions`
Document Fields:
- topic: string
- scheduledAt: timestamp
- aiCount: number
- realCount: number
- joinLink: string
- participants: array of { name, type }
- transcript: array of { speaker, message, time }
- feedback: object (generated by AI)

---

ðŸŽ¨ UI/UX Guidelines:
- Modern, responsive layout with Tailwind CSS
- Centered cards for each form and chat section
- Use modals or toasts for status messages
- Optionally add microphone icon or voice animation

ðŸ“¦ Folder Structure:
- /client â†’ React app
- /functions â†’ Firebase backend
- /firestore.rules â†’ Setup basic read/write security
- .env â†’ Local dev keys
- README with full instructions

Please generate the full codebase using this structure.
